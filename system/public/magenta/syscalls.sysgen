# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#
# The syntax of each line is
#     syscall <name> [attributes] ([args]) [returns (<type> [args])];
#
# with '[]' being optional and '<>' being required input.
#
# <name> is the syscall function name. It must be a valid C identifier.
#
# [attributes] can be empty or is a space separated list of words with
# meaning for a particular generator.
#
# [args] can be empty or is a comma separated list of '<aname>: <type> [ctr]'
#
# <aname> is the argument name. It must be a valid C indentifier.
#
# <type> is the argument type. It must be a valid C indentifer with an optional
# array-spec which when present it must be "[number]" or "[aname]", with the
# number being an integer and aname the name of the argument that controls the
# array size.
#
# [ctr] can be empty or is an all-caps word to specify a argument constraint
# with valid values being one of: 'IN', 'OUT', 'INOUT'
#
# The 'returns (<type>)' is expected unless one of the attributes is 'noreturn'.
#

# Time

syscall time_get
    (clock_id: uint32_t)
    returns (mx_time_t);

syscall nanosleep blocking
    (deadline: mx_time_t)
    returns (mx_status_t);

syscall ticks_get vdsocall
    ()
    returns (uint64_t);

syscall ticks_per_second vdsocall const
    ()
    returns (uint64_t);

syscall deadline_after vdsocall
    (nanoseconds: mx_duration_t)
    returns (mx_time_t);

# Global system information

syscall system_get_num_cpus vdsocall const
    ()
    returns (uint32_t);

syscall system_get_version vdsocall
    (version: char[version_len] OUT, version_len: uint32_t)
    returns (mx_status_t);

syscall system_get_physmem vdsocall
    ()
    returns (uint64_t);

# Abstraction of machine operations

syscall cache_flush vdsocall
    (addr: any[len] IN, len: size_t, options: uint32_t)
    returns (mx_status_t);

# Generic handle operations

syscall handle_close
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall handle_duplicate
    (handle: mx_handle_t, rights: mx_rights_t)
    returns (mx_status_t, out: mx_handle_t);

syscall handle_replace
    (handle: mx_handle_t, rights: mx_rights_t)
    returns (mx_status_t, out: mx_handle_t);

# Generic object operations

syscall object_wait_one blocking
    (handle: mx_handle_t, waitfor: mx_signals_t, deadline: mx_time_t)
    returns (mx_status_t, observed: mx_signals_t);

syscall object_wait_many blocking
    (items: mx_wait_item_t[count] INOUT, count: uint32_t, deadline: mx_time_t)
    returns (mx_status_t);

syscall object_wait_async
    (handle: mx_handle_t, port_handle: mx_handle_t, key: uint64_t,
        signals: mx_signals_t, options: uint32_t)
    returns (mx_status_t);

syscall object_signal
    (handle: mx_handle_t, clear_mask: uint32_t, set_mask: uint32_t)
    returns (mx_status_t);

syscall object_signal_peer
    (handle: mx_handle_t, clear_mask: uint32_t, set_mask: uint32_t)
    returns (mx_status_t);

syscall object_get_property
    (handle: mx_handle_t, property: uint32_t, value: any[size] OUT, size: size_t)
    returns (mx_status_t);

syscall object_set_property
    (handle: mx_handle_t, property: uint32_t, value: any[size] IN, size: size_t)
    returns (mx_status_t);

syscall object_set_cookie
    (handle: mx_handle_t, scope: mx_handle_t, cookie: uint64_t)
    returns (mx_status_t);

syscall object_get_cookie
    (handle: mx_handle_t, scope: mx_handle_t)
    returns (mx_status_t, cookie: uint64_t);

syscall object_get_info
    (handle: mx_handle_t, topic: uint32_t,
        buffer: any[buffer_size] OUT, buffer_size: size_t)
    returns (mx_status_t, actual_count: size_t, avail_count: size_t);

syscall object_get_child
    (handle: mx_handle_t, koid: uint64_t, rights: mx_rights_t)
    returns (mx_status_t, out: mx_handle_t);

# IPC: Channels

syscall channel_create
    (options: uint32_t)
    returns (mx_status_t, out0: mx_handle_t, out1: mx_handle_t);

syscall channel_read
    (handle: mx_handle_t, options: uint32_t,
        bytes: any[num_bytes] OUT,
        handles: mx_handle_t[num_handles] OUT,
        num_bytes: uint32_t,
        num_handles: uint32_t)
    returns (mx_status_t, actual_bytes: uint32_t, actual_handles: uint32_t);

syscall channel_write
    (handle: mx_handle_t, options: uint32_t,
        bytes: any[num_bytes] IN, num_bytes: uint32_t,
        handles: mx_handle_t[num_handles] IN, num_handles: uint32_t)
    returns (mx_status_t);

syscall channel_call
    (handle: mx_handle_t, options: uint32_t, deadline: mx_time_t,
        args: mx_channel_call_args_t[1] IN)
    returns (mx_status_t, actual_bytes: uint32_t,
                actual_handles: uint32_t, read_status: mx_status_t);

# IPC: Sockets

syscall socket_create
    (options: uint32_t)
    returns (mx_status_t, out0: mx_handle_t, out1: mx_handle_t);

syscall socket_write
    (handle: mx_handle_t, options: uint32_t,
        buffer: any[size] IN, size: size_t)
    returns (mx_status_t, actual: size_t);

syscall socket_read
    (handle: mx_handle_t, options: uint32_t,
        buffer: any[size] OUT, size: size_t)
    returns (mx_status_t, actual: size_t);

# Threads

syscall thread_exit noreturn ();

syscall thread_create
    (process: mx_handle_t, name: char[name_len] IN, name_len: uint32_t,
        options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall thread_start
    (handle: mx_handle_t, thread_entry: uintptr_t,
        stack: uintptr_t, arg1: uintptr_t, arg2: uintptr_t)
    returns (mx_status_t);

syscall thread_read_state
    (handle: mx_handle_t, kind: uint32_t,
        buffer: any[len] OUT, len: uint32_t)
    returns (mx_status_t, actual: uint32_t);

syscall thread_write_state
    (handle: mx_handle_t, kind: uint32_t, buffer: any[buffer_len] IN, buffer_len: uint32_t)
    returns (mx_status_t);

# Processes

syscall process_exit noreturn
    (retcode: int);

syscall process_create
    (job: mx_handle_t, name: char[name_len] IN, name_len: uint32_t, options: uint32_t)
    returns (mx_status_t, proc_handle: mx_handle_t, vmar_handle: mx_handle_t);

syscall process_start
    (process_handle: mx_handle_t, thread_handle: mx_handle_t, entry: uintptr_t,
        stack: uintptr_t, arg_handle: mx_handle_t, arg2: uintptr_t)
    returns (mx_status_t);

syscall process_read_memory
    (proc: mx_handle_t, vaddr: uintptr_t,
    buffer: any[len] OUT, len: size_t)
    returns (mx_status_t, actual: size_t);

syscall process_write_memory
    (proc: mx_handle_t, vaddr: uintptr_t,
    buffer: any[len] IN, len: size_t)
    returns (mx_status_t, actual: size_t);

# Jobs

syscall job_create
    (parent_job: mx_handle_t, options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall job_set_policy
    (job: mx_handle_t, options: uint32_t, topic: uint32_t, policy: any[count] IN, count: uint32_t)
    returns (mx_status_t);

# Shared between process and threads
syscall task_bind_exception_port
    (object: mx_handle_t, eport: mx_handle_t, key: uint64_t, options: uint32_t)
    returns (mx_status_t);

syscall task_suspend
    (task_handle: mx_handle_t)
    returns (mx_status_t);

syscall task_resume
    (task_handle: mx_handle_t, options: uint32_t)
    returns (mx_status_t);

syscall task_kill
    (task_handle: mx_handle_t)
    returns (mx_status_t);

# Synchronization

syscall event_create
    (options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall eventpair_create
    (options: uint32_t)
    returns (mx_status_t, out0: mx_handle_t, out1: mx_handle_t);

syscall futex_wait blocking
    (value_ptr: mx_futex_t[1] INOUT, current_value: int, deadline: mx_time_t)
    returns (mx_status_t);

syscall futex_wake
    (value_ptr: mx_futex_t[1] IN, count: uint32_t)
    returns (mx_status_t);

syscall futex_requeue
    (wake_ptr: mx_futex_t[1] INOUT, wake_count: uint32_t, current_value: int,
        requeue_ptr: mx_futex_t[1] INOUT, requeue_count: uint32_t)
    returns (mx_status_t);

# Wait sets

syscall waitset_create deprecated
    (options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall waitset_add deprecated
    (waitset_handle: mx_handle_t, cookie: uint64_t,
        handle: mx_handle_t, signals: mx_signals_t)
    returns (mx_status_t);

syscall waitset_remove deprecated
    (waitset_handle: mx_handle_t, cookie: uint64_t)
    returns (mx_status_t);

syscall waitset_wait blocking deprecated
    (waitset_handle: mx_handle_t, deadline: mx_time_t,
        results: mx_waitset_result_t[count] OUT, count: uint32_t[1] INOUT)
    returns (mx_status_t);

# Ports

syscall port_create
    (options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall port_queue
    (handle: mx_handle_t, packet: any[size] IN, size: size_t)
    returns (mx_status_t);

syscall port_wait blocking
    (handle: mx_handle_t, deadline: mx_time_t, packet: any[size] OUT, size: size_t)
    returns (mx_status_t);

syscall port_bind
    (handle: mx_handle_t, key: uint64_t, source: mx_handle_t, signals: mx_signals_t)
    returns (mx_status_t);

syscall port_cancel
    (handle: mx_handle_t, source: mx_handle_t, key: uint64_t)
    returns (mx_status_t);

# Memory management

syscall vmo_create
    (size: uint64_t, options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall vmo_read
    (handle: mx_handle_t, data: any[len] OUT, offset: uint64_t, len: size_t)
    returns (mx_status_t, actual: size_t);

syscall vmo_write
    (handle: mx_handle_t, data: any[len] IN, offset: uint64_t, len: size_t)
    returns (mx_status_t, actual: size_t);

syscall vmo_get_size
    (handle: mx_handle_t)
    returns (mx_status_t, size: uint64_t);

syscall vmo_set_size
    (handle: mx_handle_t, size: uint64_t)
    returns (mx_status_t);

syscall vmo_op_range
    (handle: mx_handle_t, op: uint32_t, offset: uint64_t, size: uint64_t,
        buffer: any[buffer_size] INOUT, buffer_size: size_t)
    returns (mx_status_t);

syscall vmo_clone
    (handle: mx_handle_t, options: uint32_t, offset: uint64_t, size: uint64_t)
    returns (mx_status_t, out: mx_handle_t);

syscall vmo_set_cache_policy
    (handle: mx_handle_t, cache_policy: uint32_t)
    returns (mx_status_t);

# Address space management

syscall vmar_allocate
    (parent_vmar_handle: mx_handle_t, offset: size_t, size: size_t, map_flags: uint32_t)
     returns (mx_status_t, child_vmar: mx_handle_t, child_addr: uintptr_t);

syscall vmar_destroy
    (vmar_handle: mx_handle_t)
    returns (mx_status_t);

syscall vmar_map
    (vmar_handle: mx_handle_t, vmar_offset: size_t,
        vmo_handle: mx_handle_t, vmo_offset: uint64_t,
        len: size_t, map_flags: uint32_t)
    returns (mx_status_t, mapped_addr: uintptr_t);

syscall vmar_unmap
    (vmar_handle: mx_handle_t, addr: uintptr_t, len: size_t)
    returns (mx_status_t);

syscall vmar_protect
    (vmar_handle: mx_handle_t, addr: uintptr_t, len: size_t,
        prot_flags: uint32_t)
    returns (mx_status_t);

# Random Number generator

syscall cprng_draw
    (buffer: any[len] OUT, len: size_t)
    returns (mx_status_t, actual: size_t);

syscall cprng_add_entropy
    (buffer: any[len] IN, len: size_t)
    returns (mx_status_t);

# Fifo

syscall fifo_create
    (elem_count: uint32_t, elem_size: uint32_t, options: uint32_t)
    returns (mx_status_t, out0: mx_handle_t, out1: mx_handle_t);

syscall fifo_read
    (handle: mx_handle_t, data: any[len] OUT, len: size_t)
    returns (mx_status_t, num_written: uint32_t);

syscall fifo_write
    (handle: mx_handle_t, data: any[len] IN, len: size_t)
    returns (mx_status_t, num_written: uint32_t);

# Multi-function

syscall vmar_unmap_handle_close_thread_exit vdsocall
    (vmar_handle: mx_handle_t, addr: uintptr_t, len: size_t, handle: mx_handle_t)
    returns (mx_status_t);

syscall futex_wake_handle_close_thread_exit vdsocall
    (value_ptr: mx_futex_t[1] IN, count: uint32_t, handle: mx_handle_t)
    returns (mx_status_t);

# ---------------------------------------------------------------------------------------
# Syscalls past this point are non-public
# Some currently do not require a handle to restrict access.
# Those will be modified or removed.
# These syscalls are *not* a stable API/ABI surface.
# ---------------------------------------------------------------------------------------

# Logging

syscall log_create
    (options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall log_write
    (handle: mx_handle_t, len: uint32_t, buffer: any[len] IN, options: uint32_t)
    returns (mx_status_t);

syscall log_read
    (handle: mx_handle_t, len: uint32_t, buffer: any[len] OUT, options: uint32_t)
    returns (mx_status_t);

# Tracing

syscall ktrace_read
    (handle: mx_handle_t, data: any[len] OUT, offset: uint32_t,
        len: uint32_t)
    returns (mx_status_t, actual: uint32_t);

syscall ktrace_control
    (handle: mx_handle_t, action: uint32_t, options: uint32_t, ptr: any[action] INOUT)
    returns (mx_status_t);

syscall ktrace_write
    (handle: mx_handle_t, id: uint32_t, arg0: uint32_t, arg1: uint32_t)
    returns (mx_status_t);

syscall mtrace_control no_wrap
    (handle: mx_handle_t,
        kind: uint32_t, action: uint32_t, options: uint32_t,
        ptr: any[size] INOUT, size: uint32_t)
    returns (mx_status_t);

# Syscalls to be removed / refactored

syscall debug_transfer_handle
    (proc: mx_handle_t, handle: mx_handle_t)
    returns (mx_handle_t);

# Legacy LK debug syscalls

syscall debug_read no_wrap
    (handle: mx_handle_t, buffer: any[length] OUT, length: uint32_t)
    returns (mx_status_t);

syscall debug_write no_wrap
    (buffer: any[length] IN, length: uint32_t)
    returns (mx_status_t);

syscall debug_send_command no_wrap
    (resource_handle: mx_handle_t, buffer: any[length] IN, length: uint32_t)
    returns (mx_status_t);

# DDK Syscalls: Interrupts

syscall interrupt_create
    (handle: mx_handle_t, vector: uint32_t, options: uint32_t)
    returns (mx_handle_t);

syscall interrupt_complete
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall interrupt_wait blocking
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall interrupt_signal
    (handle: mx_handle_t)
    returns (mx_status_t);

# DDK Syscalls: MMIO and Ports

syscall mmap_device_io
    (handle: mx_handle_t, io_addr: uint32_t, len: uint32_t)
    returns (mx_status_t);

syscall mmap_device_memory
    (handle: mx_handle_t, paddr: mx_paddr_t, len: uint32_t,
        cache_policy: mx_cache_policy_t)
    returns (mx_status_t, out_vaddr: uintptr_t);

syscall io_mapping_get_info
    (handle: mx_handle_t)
    returns (mx_status_t, out_vaddr: uintptr_t, out_size: uint64_t);

syscall vmo_create_contiguous
    (rsrc_handle: mx_handle_t, size: size_t, alignment_log2: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

# DDK Syscalls: Misc Info

syscall bootloader_fb_get_info
    ()
    returns (mx_status_t, format: uint32_t, width: uint32_t, height: uint32_t, stride: uint32_t);

syscall set_framebuffer
    (handle: mx_handle_t, vaddr: any[1] INOUT, len: uint32_t, format: uint32_t,
        width: uint32_t, height: uint32_t, stride: uint32_t)
    returns (mx_status_t);

syscall set_framebuffer_vmo
    (handle: mx_handle_t, vmo: mx_handle_t, len: uint32_t, format: uint32_t,
        width: uint32_t, height: uint32_t, stride: uint32_t)
    returns (mx_status_t);

syscall clock_adjust
    (handle: mx_handle_t, clock_id: uint32_t, offset: int64_t)
    returns (mx_status_t);

# DDK Syscalls: PCI

syscall pci_get_nth_device
    (handle: mx_handle_t, index: uint32_t)
    returns (mx_handle_t, out_info: mx_pcie_device_info_t);

syscall pci_claim_device
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall pci_enable_bus_master
    (handle: mx_handle_t, enable: bool)
    returns (mx_status_t);

syscall pci_enable_pio
    (handle: mx_handle_t, enable: bool)
    returns (mx_status_t);

syscall pci_reset_device
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall pci_map_mmio
    (handle: mx_handle_t, bar_num: uint32_t, cache_policy: mx_cache_policy_t)
    returns (mx_status_t, out_handle: mx_handle_t);

syscall pci_get_bar
    (handle: mx_handle_t, bar_num: uint32_t, out_bar: mx_pci_resource_t[1] OUT)
    returns (mx_status_t);

syscall pci_get_config
    (handle: mx_handle_t, out_config: mx_pci_resource_t[1] OUT)
    returns (mx_status_t);

syscall pci_io_write
    (handle: mx_handle_t, bar_num: uint32_t, offset: uint32_t, len: uint32_t, value: uint32_t)
    returns (mx_status_t);

syscall pci_io_read
    (handle: mx_handle_t, bar_num: uint32_t,
        offset: uint32_t, len: uint32_t)
    returns (mx_status_t, out_value: uint32_t);

syscall pci_map_interrupt
    (handle: mx_handle_t, which_irq: int32_t)
    returns (mx_status_t, out_handle: mx_handle_t);

syscall pci_map_config
    (handle: mx_handle_t)
    returns (mx_status_t, out_handle: mx_handle_t);

syscall pci_query_irq_mode_caps
    (handle: mx_handle_t, mode: uint32_t)
    returns (mx_status_t, out_max_irqs: uint32_t);

syscall pci_set_irq_mode
    (handle: mx_handle_t, mode: uint32_t, requested_irq_count: uint32_t)
    returns (mx_status_t);

syscall pci_init
    (handle: mx_handle_t, init_buf: mx_pci_init_arg_t[len] IN, len: uint32_t)
    returns (mx_status_t);

syscall pci_add_subtract_io_range
    (handle: mx_handle_t, mmio: bool, base: uint64_t, len: uint64_t, add: bool)
    returns (mx_status_t);

# DDK Syscalls: ACPI Glue

syscall acpi_uefi_rsdp
    (handle: mx_handle_t)
    returns (uint64_t);

syscall acpi_cache_flush
    (handle: mx_handle_t)
    returns (mx_status_t);

# Resources

syscall resource_create
    (parent_handle: mx_handle_t, records: mx_rrec_t[count] IN, count: uint32_t)
    returns (mx_status_t, resource_out: mx_handle_t);

syscall resource_destroy
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall resource_get_handle
    (handle: mx_handle_t, index: uint32_t, options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall resource_do_action
    (handle: mx_handle_t, index: uint32_t, action: uint32_t, arg0: uint32_t, arg1: uint32_t)
    returns (mx_status_t);

syscall resource_connect
    (handle: mx_handle_t, channel: mx_handle_t)
    returns (mx_status_t);

syscall resource_accept
    (handle: mx_handle_t)
    returns (mx_status_t, channel: mx_handle_t);

# Hypervisor

syscall hypervisor_create
    (handle: mx_handle_t, options: uint32_t)
    returns (mx_status_t, out: mx_handle_t);

syscall hypervisor_op
    (handle: mx_handle_t, opcode: uint32_t, args: any[args_len] IN, args_len: uint32_t,
        result: any[result_len] OUT, result_len: uint32_t)
    returns (mx_status_t);

# System Control

syscall system_mexec
   (kernel: mx_handle_t, bootimage: mx_handle_t)
   returns (mx_status_t);

# Test syscalls (keep at the end)

syscall syscall_test_0() returns (mx_status_t);
syscall syscall_test_1 test_category1 (a:int) returns (mx_status_t);
syscall syscall_test_2 test_category1 (a:int, b:int) returns (mx_status_t);
syscall syscall_test_3 test_category2 (a:int, b:int, c:int) returns (mx_status_t);
syscall syscall_test_4(a:int, b:int, c:int, d:int) returns (mx_status_t);
syscall syscall_test_5(a:int, b:int, c:int, d:int, e:int) returns (mx_status_t);
syscall syscall_test_6(a:int, b:int, c:int, d:int, e:int, f:int) returns (mx_status_t);
syscall syscall_test_7(a:int, b:int, c:int, d:int, e:int, f:int, g:int) returns (mx_status_t);
syscall syscall_test_8(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int) returns (mx_status_t);
syscall syscall_test_wrapper(a:int, b:int, c:int) returns (mx_status_t);
